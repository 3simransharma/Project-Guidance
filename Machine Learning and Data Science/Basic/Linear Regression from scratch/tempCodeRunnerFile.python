
# Machine learning in general is all about prediction. A prediction is nothing but minimizing the error in the model so that it gives accurate predictions.
# Linear regression is a statistical method which is used to predict the value of a dependent variable (y) based on the values of the independent variables (x). 
# It assumes a linear relationship
# Y=wX+b
# Y->dependent variable
# X->independent variable
# w->weight- weight is simply the importance/strength of the independent variable, 
# b->bias- bias is a constant value which is added to the dependent variable to make the model more accurate.
# In this example we will use a simple dataset which contains the years of experience and salary.
# Here, we predict the salary based on the years of experience
#salary is the target variable that should be predicted
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

class Linear_Regression():
  # initiating the parameters (learning rate & no. of iterations)
  def __init__(self, learning_rate, no_of_iterations):
    self.learning_rate = learning_rate
    self.no_of_iterations = no_of_iterations


  def fit(self, X, Y ):
    # number of training examples -m 
    #number of features -   n
    self.m, self.n = X.shape  # number of rows & columns
    # initiating the weight and bias 
    self.w = np.zeros(self.n)
    self.b = 0
    self.X = X
    self.Y = Y
    # implementing Gradient Descent
    for i in range(self.no_of_iterations):
      self.update_weights()


  def update_weights(self):
    Y_prediction = self.predict(self.X)
    # calculate gradients
    dw = - (2 * (self.X.T).dot(self.Y - Y_prediction)) / self.m
    db = - 2 * np.sum(self.Y - Y_prediction)/self.m
    # upadating the weights
    self.w = self.w - self.learning_rate*dw
    self.b = self.b - self.learning_rate*db
 

  def predict(self, X):
    return X.dot(self.w) + self.b



# loading the data from csv file to a pandas dataframe
salary_data = pd.read_csv(r'F:\OpenSource\Project-Guidance\Machine Learning and Data Science\Basic\Linear Regression from scratch\salary_Data.csv')

# printing the first 5 columns of the dataframe
salary_data.head()

# last 5 rows of the dataframe
salary_data.tail()

# number of rows & columns in the dataframe
print("shape")
salary_data.shape

# checking for missing values
salary_data.isnull().sum()

"""Splitting the feature & target"""

X = salary_data.iloc[:,:-1].values      
Y = salary_data.iloc[:,1].values

print(X)

print(Y)

"""Splitting the dataset into training & test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state = 2)

"""Training the Linear Regression model"""

model = Linear_Regression(learning_rate = 0.02, no_of_iterations=1000)

model.fit(X_train, Y_train)

# printing the parameter values ( weights & bias)

print('weight = ', model.w[0])
print('bias = ', model.b)

"""y = 9514(x) + 23697


salary = 9514(experience) + 23697

Predict the salary value for test data
"""

test_data_prediction = model.predict(X_test)





print(test_data_prediction)

"""Visualizing the predicted values & actual Values"""

plt.scatter(X_test, Y_test, color = 'red')
plt.plot(X_test, test_data_prediction, color='blue')
plt.xlabel(' Work Experience')
plt.ylabel('Salary')
plt.title(' Salary vs Experience')
plt.show()